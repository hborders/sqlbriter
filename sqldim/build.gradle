apply plugin: 'com.android.library'
apply plugin: 'com.vanniktech.maven.publish'
apply plugin: 'com.github.ben-manes.versions'

configurations {
  checkerFrameworkAnnotatedJDK {
    description = 'a copy of JDK classes with Checker Framework type qualifiers inserted'
  }
  errorproneJavac {
    description = 'required to run the Checker Framework.'
  }
}

dependencies {
  api rootProject.ext.rxJava
  api rootProject.ext.supportSqlite
  api rootProject.ext.supportAnnotations

  androidTestImplementation rootProject.ext.supportTestRunner // for AndroidJUnit4, ApplicationProvider
  androidTestImplementation rootProject.ext.androidxTestRunner // for SdkSuppress
  androidTestImplementation rootProject.ext.truth
  androidTestImplementation rootProject.ext.supportSqliteFramework

  lintChecks project(':sqldim-lint')

  compileOnly rootProject.ext.checkerQualAndroid
  annotationProcessor rootProject.ext.checker
  errorproneJavac rootProject.ext.errorproneJavac
}

android {
  buildTypes {
    checkTypes {
      javaCompileOptions.annotationProcessorOptions.classNames.add("org.checkerframework.checker.nullness.NullnessChecker")
      javaCompileOptions.annotationProcessorOptions.arguments.put("stubs", project.file('src/main/stubs').path)
      javaCompileOptions.annotationProcessorOptions.arguments.put("stubWarnIfNotFound", null)
      // You can pass options like so:
      // javaCompileOptions.annotationProcessorOptions.arguments.put("warns", "")

      // https://github.com/typetools/checker-framework/issues/3043 workaround
      javaCompileOptions.annotationProcessorOptions.arguments.put("nocheckjdk", "")
    }
  }

  compileSdkVersion versions.compileSdk

  defaultConfig {
    minSdkVersion versions.minSdk

    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  lintOptions {
    textOutput 'stdout'
    textReport true
  }

  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
  libraryVariants.all { variant ->
    // https://stackoverflow.com/a/52504256/9636
    variant.generateBuildConfigProvider.configure {
      it.enabled = false
    }
  }

  // required for DimContentResolverTest
  useLibrary 'android.test.base' // for AndroidTestCase
  useLibrary 'android.test.runner' // for ProviderTestCase2
  useLibrary 'android.test.mock' // for MockContentProvider
}

gradle.projectsEvaluated {
  tasks.withType(JavaCompile).all { compile ->
    if (compile.name.contains("CheckTypes")) {
      options.fork = true
      // gradle 6.4.1 causes
      // org.codehaus.groovy.runtime.GStringImpl cannot be cast to java.base/java.lang.String
      // on the line below without the `.toString()`
      // Workaround https://github.com/typetools/checker-framework/issues/1916
      // Filed issue: https://github.com/typetools/checker-framework/issues/3339
      options.forkOptions.jvmArgs += ["-Xbootclasspath/p:${configurations.errorproneJavac.asPath}".toString()]
    }
  }
}

// from https://github.com/vanniktech/gradle-maven-publish-plugin
mavenPublish {
  targets {
    uploadArchives {
      releaseRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      snapshotRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
      // don't leave `repositoryUsername = null` or `repositoryPassword = null` set
      // because we should set them from the command line with the -P option to keep
      // usernames and passwords out of git
      // repositoryUsername = null // This defaults to either the SONATYPE_NEXUS_USERNAME Gradle property or the system environment variable.
      // repositoryPassword = null // This defaults to either the SONATYPE_NEXUS_PASSWORD Gradle property or the system environment variable.
      signing = true // This defaults to true. GPG signing is required by mavenCentral. If you are deploying elsewhere, you can set this to false.
    }
  }
}
