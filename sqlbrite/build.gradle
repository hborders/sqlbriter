apply plugin: 'com.android.library'

configurations {
  checkerFrameworkAnnotatedJDK {
    description = 'a copy of JDK classes with Checker Framework type qualifiers inserted'
  }
}

dependencies {
  api rootProject.ext.rxJava
  api rootProject.ext.supportSqlite
  implementation rootProject.ext.supportAnnotations

  androidTestImplementation rootProject.ext.supportTestRunner
  androidTestImplementation rootProject.ext.androidxTestRunner
  androidTestImplementation rootProject.ext.truth
  androidTestImplementation rootProject.ext.supportSqliteFramework
  androidTestImplementation rootProject.ext.supportTestRules

  lintChecks project(':sqlbrite-lint')

  implementation rootProject.ext.checkerQualAndroid
  annotationProcessor rootProject.ext.checker
  checkerFrameworkAnnotatedJDK rootProject.ext.checkerJdk8
}

android {
  buildTypes {
    checkTypes {
      javaCompileOptions.annotationProcessorOptions.classNames.add("org.checkerframework.checker.nullness.NullnessChecker")
    }
  }

  compileSdkVersion versions.compileSdk

  defaultConfig {
    minSdkVersion versions.minSdk

    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  lintOptions {
    textOutput 'stdout'
    textReport true
  }

  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
  libraryVariants.all { variant ->
    // https://stackoverflow.com/a/52504256/9636
    variant.generateBuildConfigProvider.configure {
      it.enabled = false
    }
  }
}

gradle.projectsEvaluated {
  tasks.withType(JavaCompile).all { compile ->
    if (compile.name.contains("CheckTypes")) {
      compile.options.compilerArgs += [
              "-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}"
      ]
    }
  }
}

apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
