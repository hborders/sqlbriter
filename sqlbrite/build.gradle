apply plugin: 'com.android.library'

configurations {
  checkerFrameworkAnnotatedJDK {
    description = 'a copy of JDK classes with Checker Framework type qualifiers inserted'
  }
  errorproneJavac {
    description = 'required to run the Checker Framework.'
  }
}

dependencies {
  api rootProject.ext.rxJava
  api rootProject.ext.supportSqlite
  api rootProject.ext.supportAnnotations

  androidTestImplementation rootProject.ext.supportTestRunner // for AndroidJUnit4, ApplicationProvider
  androidTestImplementation rootProject.ext.androidxTestRunner // for SdkSuppress
  androidTestImplementation rootProject.ext.truth
  androidTestImplementation rootProject.ext.supportSqliteFramework

  lintChecks project(':sqlbrite-lint')

  compileOnly rootProject.ext.checkerQualAndroid
  annotationProcessor rootProject.ext.checker
  checkerFrameworkAnnotatedJDK rootProject.ext.checkerJdk8
  errorproneJavac rootProject.ext.errorproneJavac
}

android {
  buildTypes {
    checkTypes {
      javaCompileOptions.annotationProcessorOptions.
              classNames.add("org.checkerframework.checker.nullness.NullnessChecker")
      javaCompileOptions.annotationProcessorOptions.arguments.put("stubs", project.file('src/main/stubs').path)
      javaCompileOptions.annotationProcessorOptions.arguments.put("stubWarnIfNotFound", null)
      // You can pass options like so:
      // javaCompileOptions.annotationProcessorOptions.arguments.put("warns", "")
    }
  }

  compileSdkVersion versions.compileSdk

  defaultConfig {
    minSdkVersion versions.minSdk

    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  lintOptions {
    textOutput 'stdout'
    textReport true
  }

  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
  libraryVariants.all { variant ->
    // https://stackoverflow.com/a/52504256/9636
    variant.generateBuildConfigProvider.configure {
      it.enabled = false
    }
  }

  // required for BriteContentResolverTest
  useLibrary 'android.test.base' // for AndroidTestCase
  useLibrary 'android.test.runner' // for ProviderTestCase2
  useLibrary 'android.test.mock' // for MockContentProvider
}

gradle.projectsEvaluated {
  tasks.withType(JavaCompile).all { compile ->
    if (compile.name.contains("CheckTypes")) {
      compile.options.compilerArgs += [
              "-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}"
      ]
      options.fork = true
      options.forkOptions.jvmArgs += ["-Xbootclasspath/p:${configurations.errorproneJavac.asPath}"]
    }
  }
}

apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
